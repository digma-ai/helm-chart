name: Lint Helm Charts

on: [pull_request]

jobs:
  lint-helm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1
        with:
          version: v3.10.1
      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          echo "Changed charts: $changed"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Setup kubectl
        if: steps.list-changed.outputs.changed == 'true'
        run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/ 
      - name: Helm dependency update
        if: steps.list-changed.outputs.changed == 'true'
        run: |
            helm dependency update ./charts/digma-ng
      - name: Run Helm Lint
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          helm lint ./charts/digma-ng \
            --set digma.licenseKey="dummy-license-key" \
            --set digma.auth.email="ci@example.invalid" \
            --set digma.auth.password="dummy-pass" \
            --set digma.accessToken="dummy-token"

      - name: Create k8s Kind Cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: validation-cluster
      - name: Test Hook-based Installation (Dry Run)
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          set -e
          echo "=== Testing Full Hook-based Installation ==="
          # Test the complete installation with hooks (dry-run)
          # This tests that hooks would run and install CRDs automatically
          helm install test-install ./charts/digma-ng \
            --set digma.licenseKey="dummy-license-key" \
            --set digma.auth.email="ci@example.invalid" \
            --set digma.auth.password="dummy-pass" \
            --set digma.accessToken="dummy-token" \
            --set strimzi.manageCRDs=true \
            --dry-run
            
      - name: Validate Hook Templates
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          set -e
          echo "=== Validating Hook Templates ==="
          # Test that our CRD installation hooks render correctly
          helm template test-hooks ./charts/digma-ng \
            --set digma.licenseKey="dummy-license-key" \
            --set digma.auth.email="ci@example.invalid" \
            --set digma.auth.password="dummy-pass" \
            --set digma.accessToken="dummy-token" \
            --set strimzi.manageCRDs=true \
            --show-only templates/hooks/crd-installer-rbac.yaml \
            --show-only templates/hooks/crd-installer-job.yaml \
          | kubectl apply --dry-run=client -f -
          
      - name: Test Disabled CRD Management
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          set -e
          echo "=== Testing with CRD management disabled ==="
          # When manageCRDs=false, hooks should not be rendered
          output=$(helm template test-disabled ./charts/digma-ng \
            --set digma.licenseKey="dummy-license-key" \
            --set digma.auth.email="ci@example.invalid" \
            --set digma.auth.password="dummy-pass" \
            --set digma.accessToken="dummy-token" \
            --set strimzi.manageCRDs=false \
            --show-only templates/hooks/crd-installer-rbac.yaml \
            --show-only templates/hooks/crd-installer-job.yaml 2>/dev/null || true)
          
          if [ -z "$output" ]; then
            echo "✅ No hook resources when manageCRDs=false (as expected)"
          else
            echo "❌ Hook resources found when manageCRDs=false"
            echo "$output"
            exit 1
          fi


