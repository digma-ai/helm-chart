## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters
## @param global.imagePullSecrets Global Docker registry secret names as an array
##
global:
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []

## @section Common parameters
##


## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}


debug: false

size: medium # small | medium | large
presets:
  small:
    collectorWorker:
      replicas: 1
    measurementAnalysis: 
      replicas: 1
    digmaPipelineWorker: 
      replicas: 1
  medium:
    collectorWorker:
      replicas: 4
    measurementAnalysis: 
      replicas: 4
    digmaPipelineWorker: 
      replicas: 1
  large:
    collectorWorker:
      replicas: 6
    measurementAnalysis: 
      replicas: 4
    digmaPipelineWorker: 
      replicas: 4

deploymentType: Helm
exposeInternalErrorDetails: true
imagePullSecretName:
tolerations:
nodeSelector:

traceCollectorThresholds:
  recentActivityUpdateThresholdSeconds: 5
  upsertEndpointThresholdSeconds: 5
  upsertSpansThresholdSeconds: 5
  upsertSpanFlowMetadataThresholdSeconds: 5

kafka:
  host: "{{ .Release.Name }}-kafka"
  imageTag: 3.5.1
  resources: {
    requests: {
      memory: 400Mi,
      cpu: 200m
    },
    limits: {
      memory: 3Gi,
      cpu: 1000m
    }
  }
  annotations: {}
  labels: {}
  args: []
  
redis:
  host: "{{ .Release.Name }}-redis"
  imageTag: 7.0.5-alpine
  resources:
    requests:
      memory: "100Mi"
      cpu: "50m"
    limits:
      memory: "2Gi"
      cpu: "400m"
  config:
    maxmemory: "2g"
    maxmemoryPolicy: "allkeys-lru"
  annotations: {}
  labels: {}
  args: []

influx:
  host: "{{ .Release.Name }}-influxdb"
  imageTag: 2.7.1
  resources: {
    requests: {
      memory: 500Mi,
      cpu: 500m
    },
    limits: {
      memory: 2Gi,
      cpu: 2000m
    }
  }
  config: 
    queryConcurrency: 30
    queryQueueSize: 200
  annotations: {}
  labels: {}
  args: []
    
postgres:
  host: "{{ .Release.Name }}-postgres"
  imageTag: 15.1
  port: 5432
  username: postgres
  password: postgres
  maxConnections: 400
  maxMemory: 800MB # mapped to shared_buffers
  resources: {
    requests: {
      memory: 1Gi,
      cpu: 200m
    },
    limits: {
      memory: 2Gi,
      cpu: 1000m
    }
  }
  annotations: {}
  labels: {}
  args: []

pgadmin:
  host: "{{ .Release.Name }}-pgadmin"
  email: admin@admin.com
  password: admin

embeddedJaeger:
  host: "{{ .Release.Name }}-embedded-jaeger"
  imageTag: "1.61.0"
  enabled: true
  loadbalancer: true
  storage: "badger" # can be "badger" or "elasticsearch"
  volumeSize:  #volumeSize only for badger
  service:
    annotations: {}
  annotations: {}
  labels: {}
  args: []

elastic:
  imageTag: "8.15.1"
  storage: 80Gi
  resources: {
    requests: {
      memory: 2Gi,
      cpu: 1
    },
    limits: {
      memory: 4Gi,
      cpu: 2
    }
  }
  annotations: {}
  labels: {}
  args: []

kibana:
  host: "{{ .Release.Name }}-kibana"

redisCommander:
  host: "{{ .Release.Name }}-redis-commander"

elasticApmServer:
  host: "{{ .Release.Name }}-apm"

elasticsearch:
  host: "{{ .Release.Name }}-elasticsearch"


collectorWorker:
  image:
    registry: docker.io
    repository: digmatic/digma-collector-worker
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  replicas: "{{ index .Values.presets .Values.size \"collectorWorker\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 300m
    },
    limits: {
      memory: 600Mi,
      cpu: 600m
    }
  }
  ## Extra labels for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## Annotations for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ## Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## Node labels for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## Tolerations for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  env:
  - name: "Sampling__Enable"
    value: "true"
  - name: "ExtendedObservability__Enable"
    value: "true"
  - name: "TraceTempStorage__TraceForJaegerExpirationInMinutes"
    value: "10"
  - name: BlockedTrace__TraceSpansLimit
    value: "3000"
  app:
    ignoreEndpoints:
      - Route: "/health"
        RouteRegex: ""
        Method: "GET"
        Service: "*"
      - Route: "/healthcheck"
        RouteRegex: ""
        Method: "GET"
        Service: "*"
      - Route: "/metrics"
        RouteRegex: ""
        Method: "GET"
        Service: "*"
otelCollector:
  image:
    registry: docker.io
    repository: otel/opentelemetry-collector-contrib
    tag: 0.103.0
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  samplingPercentage: 100
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      cpu: 200m
      memory: 300Mi
  service:
    ## @param service type (`ClusterIP`, `NodePort` or `LoadBalancer`)
    ##
    type: ClusterIP
    ## @param Annotations for service
    ##
    annotations: {}
    ports:
      health: 13133
      ## should set http or grpc not both of them
      grpc: 4317
      http: 4318
  ## Extra labels for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ##  Annotations for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ##  Node labels for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ##  Tolerations for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## Configure the ingress resource that allows you to access the
  ## Service. Set up the URL
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  grpc:
    ingress:
      ##  Enable ingress controller resource
      ##
      enabled: true
      ##  Override API Version (automatically detected if not set)
      ##
      apiVersion: ""
      ##  Default host for the ingress resource
      ##
      hostname: 123.collector-grpc.digma.systems
      ## IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: "alb"
      ## Ingress Path type
      ##
      pathType: ImplementationSpecific
      
      ## Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
      ## Use this parameter to set the required annotations for cert-manager, see
      ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
      ##
      ## e.g:
      ## annotations:
      ##   kubernetes.io/ingress.class: nginx
      ##   cert-manager.io/cluster-issuer: cluster-issuer-name
      ##
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip #facilitating efficient load balancing for services exposed via ClusterIP
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
        alb.ingress.kubernetes.io/backend-protocol-version: GRPC
        alb.ingress.kubernetes.io/backend-protocol: HTTP
        #alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true
        alb.ingress.kubernetes.io/certificate-arn: 
        # alb.ingress.kubernetes.io/healthcheck-path: "/health"
        # alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
        # alb.ingress.kubernetes.io/healthcheck-port: "health"
        # alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
        # alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
        # alb.ingress.kubernetes.io/healthcheck-healthy-threshold-count: "3"
        # alb.ingress.kubernetes.io/healthcheck-unhealthy-threshold-count: "3"

        alb.ingress.kubernetes.io/group.name: "externals"
      ## Additional arbitrary path/backend objects
      ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
      ## extraPaths:
      ## - path: /*
      ##   backend:
      ##     serviceName: ssl-redirect
      ##     servicePort: use-annotation
      ##
      extraPaths: []
      ## Additional rules to be covered with this ingress record
      ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
      ## e.g:
      ## extraRules:
      ## - host: example.local
      ##     http:
      ##       path: /
      ##       backend:
      ##         service:
      ##           name: example-svc
      ##           port:
      ##             name: http
      ##
      extraRules: []
  http:
    ingress:
      ##  Enable ingress controller resource
      ##
      enabled: true
      ##  Override API Version (automatically detected if not set)
      ##
      apiVersion: ""
      ##  Default host for the ingress resource
      ##
      hostname: 123.collector-http.digma.systems
      ## IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: "alb"
      ## Ingress Path type
      ##
      pathType: ImplementationSpecific
      
      ## Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
      ## Use this parameter to set the required annotations for cert-manager, see
      ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
      ##
      ## e.g:
      ## annotations:
      ##   kubernetes.io/ingress.class: nginx
      ##   cert-manager.io/cluster-issuer: cluster-issuer-name
      ##
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip #facilitating efficient load balancing for services exposed via ClusterIP
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
        alb.ingress.kubernetes.io/backend-protocol: HTTP
        #alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true
        alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:585085114703:certificate/829b61e8-acaf-4046-acd3-e970fb8b39de
        alb.ingress.kubernetes.io/healthcheck-path: "/health"
        alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
        alb.ingress.kubernetes.io/healthcheck-port: "health"
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
        alb.ingress.kubernetes.io/healthcheck-healthy-threshold-count: "3"
        alb.ingress.kubernetes.io/healthcheck-unhealthy-threshold-count: "3"

        alb.ingress.kubernetes.io/group.name: "externals"
      ## Additional arbitrary path/backend objects
      ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
      ## extraPaths:
      ## - path: /*
      ##   backend:
      ##     serviceName: ssl-redirect
      ##     servicePort: use-annotation
      ##
      extraPaths: []
      ## Additional rules to be covered with this ingress record
      ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
      ## e.g:
      ## extraRules:
      ## - host: example.local
      ##     http:
      ##       path: /
      ##       backend:
      ##         service:
      ##           name: example-svc
      ##           port:
      ##             name: http
      ##
      extraRules: []
collectorApi:
  image:
    registry: docker.io
    repository: digmatic/digma-collector
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  replicas: 1
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 200m
    },
    limits: {
      memory: 600Mi,
      cpu: 800m
    }
  }
  service:
    ## service type (`ClusterIP`, `NodePort` or `LoadBalancer`)
    ##
    type: ClusterIP
    ##  Annotations for service
    ##
    annotations: {}

    ports:
      internal: 5048
      grpc: 5050
      http: 5049

  ## Extra labels for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## Annotations for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ## Node labels for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## Tolerations for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
   
  ## Configure the ingress resource that allows you to access the
  ## Service. Set up the URL
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## Enable ingress controller resource
    ##
    enabled: false
    ## Override API Version (automatically detected if not set)
    ##
    apiVersion: ""
    ## Default host for the ingress resource
    ##
    hostname: ""
    ## IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "alb"
    ## Ingress Path type
    ##
    pathType: ImplementationSpecific
    ## The Path to service. You may need to set this to '/*' in order to use this with ALB ingress controllers
    ##
    path: /*
    ## Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## Additional arbitrary path/backend objects
    ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
    ## extraPaths:
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    ##
    extraPaths: []
    ## Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
analyticsApi:
  image:
    registry: docker.io
    repository: digmatic/digma-analytics
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  secured: false # must be false if ingress.enabled=true
  replicas: 1
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 100m
    },
    limits: {
      memory: 800Mi,
      cpu: 800m
    }
  }
  service:
    ## Kubernetes service type (`ClusterIP`, `NodePort` or `LoadBalancer`)
    ##
    type: ClusterIP
    ## Annotations for service
    ##
    annotations: {}
  ## Extra labels for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## Annotations for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ## Node labels for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## Tolerations for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Configure the ingress resource that allows you to access the
  ## Service. Set up the URL
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## Enable ingress controller resource
    ##
    enabled: true
    ## Override API Version (automatically detected if not set)
    ##
    apiVersion: ""
    ## Default host for the ingress resource
    ##
    hostname: 123.api.digma.systems
    ## IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "alb"
    ## Ingress Path type
    ##
    pathType: ImplementationSpecific
    ## The Path to service. You may need to set this to '/*' in order to use this with ALB ingress controllers
    ##
    path: /*
    ## Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip #facilitating efficient load balancing for services exposed via ClusterIP
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:585085114703:certificate/829b61e8-acaf-4046-acd3-e970fb8b39de
      alb.ingress.kubernetes.io/healthcheck-path: "/healthz"
      alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
      alb.ingress.kubernetes.io/healthcheck-port: "traffic-port"
      alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
      alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
      alb.ingress.kubernetes.io/healthcheck-healthy-threshold-count: "3"
      alb.ingress.kubernetes.io/healthcheck-unhealthy-threshold-count: "3"
      alb.ingress.kubernetes.io/group.name: "externals"


    ## Additional arbitrary path/backend objects
    ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
    ## extraPaths:
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    ##
    extraPaths: []
    ## Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
  ## Unique key you’ll need to provide any IDE that connects to this Digma instance, you can choose any token you'd like
  accessToken:

measurementAnalysis:
  image:
    registry: docker.io
    repository: digmatic/digma-measurement-analysis
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  replicas: "{{ index .Values.presets .Values.size \"measurementAnalysis\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 200m
    },
    limits: {
      memory: 800Mi,
      cpu: 800m
    }
  }
  ## Extra labels for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## Annotations for pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ## Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  ## Node labels for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## Tolerations for pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []


digmaScheduler:
  host: "{{ .Release.Name }}-scheduler"
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 200m
    },
    limits: {
      memory: 600Mi,
      cpu: 500m
    }
  }
  annotations: {}
  labels: {}

digmaPipelineWorker:
  replicas: "{{ index .Values.presets .Values.size \"digmaPipelineWorker\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 50m
    },
    limits: {
      memory: 400Mi,
      cpu: 500m
    }
  }
  annotations: {}
  labels: {}
  affinity:


grafana:
  host: "{{ .Release.Name }}-grafana"
  annotations: {}
  labels: {}
  args: []

prometheus:
  host: "{{ .Release.Name }}-prometheus"
  annotations: {}
  labels: {}
  args: []

k8sMetricsExporter:
  annotations: {}
  labels: {}

otelCollectorDf:
  host: "{{ .Release.Name }}-otel-collector"
  annotations: {}
  labels: {}

digmaSelfDiagnosis:
  otlpExportTraces: false
  otlpExportMetrics: false
  otlpExportLogs: false
  otlpExporterEndpoint: # either a url or 'local'
  otlpSamplerProbability: "0.1"
  

digma:
  environmentName:
  environmentType:  
  siteName: undefined
  isCentralize: true
  licenseKey: "7df80c6f820a4ec5a81fe6325769c88b"
