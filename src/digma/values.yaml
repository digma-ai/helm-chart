debug: false

size: medium # small | medium | large
presets:
  small:
    digmaCollectorWorker:
      replicas: 1
    digmaMeasurementAnalysis: 
      replicas: 1
    digmaPipelineWorker: 
      replicas: 1
  medium:
    digmaCollectorWorker:
      replicas: 4
    digmaMeasurementAnalysis: 
      replicas: 4
    digmaPipelineWorker: 
      replicas: 1
  large:
    digmaCollectorWorker:
      replicas: 6
    digmaMeasurementAnalysis: 
      replicas: 4
    digmaPipelineWorker: 
      replicas: 4

deploymentType: Helm
exposeInternalErrorDetails: true
imagePullSecretName:
tolerations:
nodeSelector:

traceCollectorThresholds:
  recentActivityUpdateThresholdSeconds: 5
  upsertEndpointThresholdSeconds: 5
  upsertSpansThresholdSeconds: 5
  upsertSpanFlowMetadataThresholdSeconds: 5

kafka:
  host: "{{ .Release.Name }}-kafka"
  imageTag: 3.5.1
  resources: {
    requests: {
      memory: 400Mi,
      cpu: 200m
    },
    limits: {
      memory: 3Gi,
      cpu: 1000m
    }
  }
  annotations: {}
  labels: {}
  args: []
  
redis:
  host: "{{ .Release.Name }}-redis"
  imageTag: 7.0.5-alpine
  resources:
    requests:
      memory: "100Mi"
      cpu: "50m"
    limits:
      memory: "2Gi"
      cpu: "400m"
  config:
    maxmemory: "2g"
    maxmemoryPolicy: "allkeys-lru"
  annotations: {}
  labels: {}
  args: []

influx:
  host: "{{ .Release.Name }}-influxdb"
  imageTag: 2.7.1
  resources: {
    requests: {
      memory: 500Mi,
      cpu: 500m
    },
    limits: {
      memory: 2Gi,
      cpu: 2000m
    }
  }
  config: 
    queryConcurrency: 30
    queryQueueSize: 200
  annotations: {}
  labels: {}
  args: []
    
postgres:
  host: "{{ .Release.Name }}-postgres"
  imageTag: 15.1
  port: 5432
  username: postgres
  password: postgres
  maxConnections: 400
  maxMemory: 800MB # mapped to shared_buffers
  resources: {
    requests: {
      memory: 1Gi,
      cpu: 200m
    },
    limits: {
      memory: 2Gi,
      cpu: 1000m
    }
  }
  annotations: {}
  labels: {}
  args: []

pgadmin:
  host: "{{ .Release.Name }}-pgadmin"
  email: admin@admin.com
  password: admin

embeddedJaeger:
  host: "{{ .Release.Name }}-embedded-jaeger"
  imageTag: "1.61.0"
  ingress: true
  enabled: true
  loadbalancer: false
  storage: "badger" # can be "badger" or "elasticsearch"
  volumeSize:  #volumeSize only for badger
  service:
    annotations: {}
  annotations: {}
  labels: {}
  args: []

elastic:
  imageTag: "8.15.1"
  storage: 80Gi
  resources: {
    requests: {
      memory: 2Gi,
      cpu: 1
    },
    limits: {
      memory: 4Gi,
      cpu: 2
    }
  }
  annotations: {}
  labels: {}
  args: []

kibana:
  host: "{{ .Release.Name }}-kibana"

redisCommander:
  host: "{{ .Release.Name }}-redis-commander"

elasticApmServer:
  host: "{{ .Release.Name }}-apm"

elasticsearch:
  host: "{{ .Release.Name }}-elasticsearch"

digmaCollectorApi:
  host: "{{ .Release.Name }}-collector-api"
  ingress: true
  loadbalancer: false
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 200m
    },
    limits: {
      memory: 600Mi,
      cpu: 800m
    }
  }
  service:
    annotations: {}
  annotations: {}
  labels: {}

digmaCollectorWorker:
  host: "{{ .Release.Name }}-collector-worker"
  replicas: "{{ index .Values.presets .Values.size \"digmaCollectorWorker\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 300m
    },
    limits: {
      memory: 600Mi,
      cpu: 600m
    }
  }
  sampling: {
    enable: true
  }
  extendedObservability: {
    enable: true
  }
  traceForJaegerTTL: 10
  ignoreEndpoints:
    - Route: "/health"
      RouteRegex: ""
      Method: "GET"
      Service: "*"
    - Route: "/healthcheck"
      RouteRegex: ""
      Method: "GET"
      Service: "*"
    - Route: "/metrics"
      RouteRegex: ""
      Method: "GET"
      Service: "*"
  annotations: {}
  labels: {}
  affinity:

digmaAnalytics:
  host: "{{ .Release.Name }}-analytics"
  ingress: true
  loadbalancer: false
  replicas: 1
  secured: false
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 100m
    },
    limits: {
      memory: 800Mi,
      cpu: 800m
    }
  }
  service:
    annotations: {}
  annotations: {}
  labels: {}

digmaScheduler:
  host: "{{ .Release.Name }}-scheduler"
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 200m
    },
    limits: {
      memory: 600Mi,
      cpu: 500m
    }
  }
  annotations: {}
  labels: {}

digmaPipelineWorker:
  replicas: "{{ index .Values.presets .Values.size \"digmaPipelineWorker\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 50m
    },
    limits: {
      memory: 400Mi,
      cpu: 500m
    }
  }
  annotations: {}
  labels: {}
  affinity:

digmaMeasurementAnalysis:
  replicas: "{{ index .Values.presets .Values.size \"digmaMeasurementAnalysis\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 200m
    },
    limits: {
      memory: 800Mi,
      cpu: 800m
    }
  }
  annotations: {}
  labels: {}
  affinity:
    
ingressController:
  enabled: true
  replicaCount: 1
  serviceType: LoadBalancer
  host: azure.digma.systems
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: MELOONA
  resources:
    requests:
      memory: "200Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "500m"
  
tls:
  crt: |
    -----BEGIN CERTIFICATE-----
    MIIDejCCAmKgAwIBAgIUQrcdn18oOcK2Pivkrzi7lmvEoQUwDQYJKoZIhvcNAQEL
    BQAwMDEeMBwGA1UEAwwVKi5henVyZS5kaWdtYS5zeXN0ZW1zMQ4wDAYDVQQKDAVE
    aWdtYTAeFw0yNDExMjAxNTIzNTlaFw0yNTExMjAxNTIzNTlaMDAxHjAcBgNVBAMM
    FSouYXp1cmUuZGlnbWEuc3lzdGVtczEOMAwGA1UECgwFRGlnbWEwggEiMA0GCSqG
    SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbVOj+VqTxNK2MfxKAKSHsZQRZzh1kiEZC
    FXSwkUW/exISiMoZ0wE6cZckMMF/uIYpsN2vsT0/vbsZtxCtzn/vlYyRVzzYVT4U
    bHkahWSv35KgpAOcHnshFmmNRIDx8nhzkihlgiEpM4RwcbTB6Zx2VjhZdofgFMQA
    ptRO+Yt26m6wM5PoXoyAa8DKQhj9ti9BayTmJyNXBk0hYdwZbeLyozyJ5aaZnfrj
    WYfhklv4vtKFNPkUgfxl4f2YW/L5U4jbRdh0wFKSAZWKAjIxSy6Ceb6W+slYgWI0
    zRaKbGQc/biFolFW8VYIDKpmuzQi/vzeLwBJJMUIeuXtmh8O4KL5AgMBAAGjgYsw
    gYgwHQYDVR0OBBYEFHDT/2vU4vKrpDwKbkFCpCT+6t0ZMB8GA1UdIwQYMBaAFHDT
    /2vU4vKrpDwKbkFCpCT+6t0ZMA8GA1UdEwEB/wQFMAMBAf8wNQYDVR0RBC4wLIIV
    Ki5henVyZS5kaWdtYS5zeXN0ZW1zghNhenVyZS5kaWdtYS5zeXN0ZW1zMA0GCSqG
    SIb3DQEBCwUAA4IBAQCaqiCv5iLITSYvvWM0t2muZPyQDcyVNktXIkQgNASBQ2Hs
    szoMd2NdaVeVjNqDupm5/gGbXWCgGKYu1kqt1BkQuxBGLkfLDPSaB3OUu5w1ICwn
    QBWhWCQaeCHl41eJSEjPwZpRGQYJz2bibdHaXHCn+QYHzRWCBQAsnpmaY3iv5zVe
    m8SnWkrpJ3WGsIj7sR1/xdNPCGvhM+s9L0G4iwokthHddQoZvwZxYJd2LSGQjTLl
    kIFzYKoiuVigzurho34CGbLmZvtjh2WsD/I5x+QRSEgG2u1NWBuNNUX6s1wX37F3
    MFnm20Snu11dGsvQB3mkHiOlptG8Mods4s1En9Xp
    -----END CERTIFICATE-----
  key: |
    -----BEGIN PRIVATE KEY-----
    MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCbVOj+VqTxNK2M
    fxKAKSHsZQRZzh1kiEZCFXSwkUW/exISiMoZ0wE6cZckMMF/uIYpsN2vsT0/vbsZ
    txCtzn/vlYyRVzzYVT4UbHkahWSv35KgpAOcHnshFmmNRIDx8nhzkihlgiEpM4Rw
    cbTB6Zx2VjhZdofgFMQAptRO+Yt26m6wM5PoXoyAa8DKQhj9ti9BayTmJyNXBk0h
    YdwZbeLyozyJ5aaZnfrjWYfhklv4vtKFNPkUgfxl4f2YW/L5U4jbRdh0wFKSAZWK
    AjIxSy6Ceb6W+slYgWI0zRaKbGQc/biFolFW8VYIDKpmuzQi/vzeLwBJJMUIeuXt
    mh8O4KL5AgMBAAECgf86C9ZbNVsYyEFn6hSqerSH9+KoV1353khjFEwxr21hIPH1
    UH410vmiiCWdte/uyrCtjmqe5/JQ35YLsLLgQKA5PVRKUU9riG9VMolkX8pAmaEx
    vBjyk8bE6/CF2hOrAUaslEcu/Ry8ni6KgUi12OxJ90PCKt6b3nwLF6I/Nlc9GHPL
    GP5WM4hZMR1CtKORTGfX4KN56s6/ZkaKFxSwjuuY+euxjZSQCSsdRjLcapCpcZl2
    evNDZqumnyiyN6b1drq+Py+L8m/kqj4+jufDF0wQBwfIrbgce9EayuVz62bgkB5l
    C1mPd14/T5KEDmHTRahHDpIgW3rEta1Fju+/YgECgYEAzvJJhs6oomHXCemAMUOj
    TaHBe45V8qx+Q3TvRiQhGv36xoW2JJ63GZz2a0qNV9PvdQC45s7tIGFlDBDHs8+i
    zz3PQIpiOJdyq/USiLR6ZAsOEr17aPDXhwGP5SnSaswy2mTWJ4ts/2LrgGt1bu2u
    32Y+G9n+2B29d8KLY+CIosECgYEAwCaWxlz68nXXRGKTynPGPgLOujx2Vwa+Ywkg
    pbYK7QCH2s1mE/TLDl1JTGU072tA1xPhi2BLAHM0TzrAzk0PN7ktpBBeJRwuNoj6
    23lB6iq7s32CfYLFs0U7aAYcl721eI4TUFDqN0zKO2ShBqPz11CQ9qzjMF8VcACB
    PXv75jkCgYEAkOAdiTpz4/oKyO2myNZJJLfw88aZdOI9IoxiVgBFDNhxDzncYZab
    KFsyR7pRaQL9yDNRPoPujZShYOj+ZWse12a2CMDYMjYUGT3gU8PFSvRSTdxI4RZ6
    TBFT42J75DhAAZRGODjrfX6Kz8Rq2dWbbtns8SKTvkhTs9uGKc2u2gECgYEAgAg2
    Zq4FuBC1Ayf7+eXyrdcJECbBY3Nm4G5whnoqBYlY/H3oClwOAOA/utukzfLVHXpt
    yoS69O3OaQxo9A18mlCVDMCrOmbwk/3pyNufA/y9XPfAPwkn2i/DSajo3GLXzCA+
    1kFUDszn43NFqDsOeuV/8h14s/5nNl3fv6whSGECgYAWdBGd9bIHhi8RlVrLG09F
    3DhqJKUmq+xuRf+oHXPgw1n4l62zzDps2i0HTsjLN5suSw6rAPu/efi9B0KKQisD
    eB6gM46MN974uS+ONG25z5Sr7bAknID45NrL8/6Qf/RSrk0h2HJO1sxkFJBlwRQN
    MQHyLyyedKJlOKYClu8brA==
    -----END PRIVATE KEY-----

grafana:
  host: "{{ .Release.Name }}-grafana"
  annotations: {}
  labels: {}
  args: []

prometheus:
  host: "{{ .Release.Name }}-prometheus"
  annotations: {}
  labels: {}
  args: []

k8sMetricsExporter:
  annotations: {}
  labels: {}

otelCollectorGateway:
  host: "{{ .Release.Name }}-otel-collector-gateway"
  enabled: false
  samplingPercentage: 100
  loadbalancer: false
  service:
    annotations: {}
  annotations: {}
  labels: {}

otelCollectorDf:
  host: "{{ .Release.Name }}-otel-collector"
  annotations: {}
  labels: {}

digmaSelfDiagnosis:
  otlpExportTraces: false
  otlpExportMetrics: false
  otlpExportLogs: false
  otlpExporterEndpoint: # either a url or 'local'
  otlpSamplerProbability: "0.1"

digma:
  environmentName: MELOONA
  environmentType: Public 
  siteName: MELOONA
  isCentralize: true
  licenseKey:
  host: digma.azure.zom
