debug: false

size: medium # small | medium | large
presets:
  small:
    digmaCollectorWorker:
      replicas: 1
    digmaMeasurementAnalysis: 
      replicas: 1
    digmaPipelineWorker: 
      replicas: 1
  medium:
    digmaCollectorWorker:
      replicas: 4
    digmaMeasurementAnalysis: 
      replicas: 4
    digmaPipelineWorker: 
      replicas: 1
  large:
    digmaCollectorWorker:
      replicas: 6
    digmaMeasurementAnalysis: 
      replicas: 4
    digmaPipelineWorker: 
      replicas: 4

deploymentType: Helm
exposeInternalErrorDetails: false

traceCollectorThresholds:
  recentActivityUpdateThresholdSeconds: 5
  upsertEndpointThresholdSeconds: 5
  upsertSpansThresholdSeconds: 5
  upsertSpanFlowMetadataThresholdSeconds: 5

kafka:
  host: "{{ .Release.Name }}-kafka"
  imageTag: 3.5.1
  resources: {
    requests: {
      memory: 400Mi,
      cpu: 200m
    },
    limits: {
      memory: 3Gi,
      cpu: 1000m
    }
  }
  
redis:
  host: "{{ .Release.Name }}-redis"
  imageTag: 7.0.5-alpine
  resources:
    requests:
      memory: "100Mi"
      cpu: "50m"
    limits:
      memory: "2Gi"
      cpu: "400m"
  config:
    maxmemory: "2g"
    maxmemoryPolicy: "allkeys-lru"

influx:
  host: "{{ .Release.Name }}-influxdb"
  imageTag: 2.7.1
  resources: {
    requests: {
      memory: 500Mi,
      cpu: 500m
    },
    limits: {
      memory: 2Gi,
      cpu: 2000m
    }
  }
  config: 
    queryConcurrency: 30
    queryQueueSize: 200
    
postgres:
  host: "{{ .Release.Name }}-postgres"
  imageTag: 15.1
  port: 5432
  username: postgres
  password: postgres
  maxConnections: 400
  maxMemory: 800MB # mapped to shared_buffers
  resources: {
    requests: {
      memory: 1Gi,
      cpu: 200m
    },
    limits: {
      memory: 2Gi,
      cpu: 1000m
    }
  }

pgadmin:
  host: "{{ .Release.Name }}-pgadmin"
  email: admin@admin.com
  password: admin

embeddedJaeger:
  host: "{{ .Release.Name }}-embedded-jaeger"
  imageTag: "1.44.0"
  enabled: true
  loadbalancer: true
  service:
    annotations: []

kibana:
  host: "{{ .Release.Name }}-kibana"

redisCommander:
  host: "{{ .Release.Name }}-redis-commander"

elasticApmServer:
  host: "{{ .Release.Name }}-apm"

elasticsearch:
  host: "{{ .Release.Name }}-elasticsearch"

digmaDs:
  host: "{{ .Release.Name }}-ds"
  imageTag: 0.0.22
  replicas: 1
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 100m
    },
    limits: {
      memory: 500Mi,
      cpu: 700m
    }
  }

digmaCollectorApi:
  host: "{{ .Release.Name }}-collector-api"
  loadbalancer: true
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 200m
    },
    limits: {
      memory: 600Mi,
      cpu: 800m
    }
  }
  service:
    annotations: []

digmaCollectorWorker:
  host: "{{ .Release.Name }}-collector-worker"
  replicas: "{{ index .Values.presets .Values.size \"digmaCollectorWorker\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 300m
    },
    limits: {
      memory: 600Mi,
      cpu: 600m
    }
  }
  sampling: {
    enable: true
  }
  extendedObservability: {
    enable: true
  }
  traceForJaegerTTL: 10

digmaAnalytics:
  host: "{{ .Release.Name }}-analytics"
  loadbalancer: true
  replicas: 1
  secured: true
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 100m
    },
    limits: {
      memory: 800Mi,
      cpu: 800m
    }
  }
  service:
    annotations: []

digmaScheduler:
  host: "{{ .Release.Name }}-scheduler"
  resources: {
    requests: {
      memory: 300Mi,
      cpu: 200m
    },
    limits: {
      memory: 600Mi,
      cpu: 500m
    }
  }

digmaPipelineWorker:
  replicas: "{{ index .Values.presets .Values.size \"digmaPipelineWorker\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 50m
    },
    limits: {
      memory: 400Mi,
      cpu: 500m
    }
  }

digmaMeasurementAnalysis:
  replicas: "{{ index .Values.presets .Values.size \"digmaMeasurementAnalysis\" \"replicas\" }}"
  resources: {
    requests: {
      memory: 100Mi,
      cpu: 200m
    },
    limits: {
      memory: 800Mi,
      cpu: 800m
    }
  }

digmaSelfDiagnosis:
  otlpExportTraces: false
  otlpExportMetrics: false
  otlpExportLogs: false
  otlpExporterEndpoint: # either a url or 'local'
  otlpSamplerProbability: "0.1"
  

digma:
  environmentName:
  environmentType:  
  siteName: undefined
  isCentralize: true
  licenseKey:
