{{- if eq .Values.digmaSelfDiagnosis.otlpExporterEndpoint "local" }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-grafana-config
data:
  datasources-yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: {{ printf "http://%s-prometheus:9090" (.Release.Name)}}
        isDefault: true
        access: proxy
        editable: true
        uid: prometheusdatasource

  dashboards-yml: |
    apiVersion: 1
    providers:
      - name: "Dashboard provider"
        orgId: 1
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
          foldersFromFilesStructure: true
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-grafana-deployment
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  serviceName: {{ .Release.Name }}-grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      volumes:
      - name: grafana-provisioning
        configMap:
          name: {{ .Release.Name }}-grafana-config
          items:
          - key: "datasources-yml"
            path: "datasources/main.yml"
          - key: "dashboards-yml"
            path: "dashboards/main.yml" 
      - name: grafana-dashboards
        emptyDir: {}
        
      initContainers:
      - name: init-grafana
        image: alpine/git:2.45.2
        command:
        - 'sh'
        - '-c'
        - |
          git clone -b local-prom-grafana https://github.com/digma-ai/helm-chart;
          cd helm-chart/src/digma/grafana-config;

          mkdir -p /var/lib/grafana/dashboards;
          cp -r dashboards/* /var/lib/grafana/dashboards/;

          echo 'Finished setting grafana config files'
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards

      containers:
      - name: grafana
        image: grafana/grafana:10.3.3
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        - name: GF_USERS_ALLOW_SIGN_UP
          value: 'false'
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: grafana-provisioning
          mountPath: /etc/grafana/provisioning
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    protocol: TCP

{{- end }}