apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-elasticsearch-stateful-set
  labels:
    app: {{ .Release.Name }}-elasticsearch
spec:
  serviceName: {{ .Release.Name }}-elasticsearch  # Added serviceName
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-elasticsearch
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: "docker.elastic.co/elasticsearch/elasticsearch:{{ .Values.elastic.imageTag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9200
              name: http
          env:
            - name: xpack.security.enabled
              value: "false"
            - name: xpack.security.transport.ssl.enabled
              value: "false"
            - name: discovery.type
              value: "single-node"
          resources:
            requests:
              memory: "{{ .Values.elastic.resources.requests.memory }}"
              cpu: "{{ .Values.elastic.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.elastic.resources.limits.memory }}"
              cpu: "{{ .Values.elastic.resources.limits.cpu }}"
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: {{ .Release.Name }}-elasticsearch
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 40Gi

---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-elasticsearch
  labels:
    app: {{ .Release.Name }}-elasticsearch
spec:
  type: ClusterIP
  ports:
    - port: 9200
      targetPort: 9200
      protocol: TCP
      name: http
  selector:
    app: {{ .Release.Name }}-elasticsearch

---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-create-ilm-policy
  labels:
    app: {{ .Release.Name }}-elasticsearch
spec:
  template:
    spec:
      containers:
        - name: create-ilm
          image: curlimages/curl:latest  # This uses a curl container
          command:
            - "sh"
            - "-c"
            - |
              # Wait for Elasticsearch to be ready
              until curl -X GET "{{ .Release.Name }}-elasticsearch:9200/_cluster/health?wait_for_status=yellow&timeout=50s"; do
                echo "Waiting for Elasticsearch to be ready...";
                sleep 5;
              done;

              # Create an ILM policy
              curl -X PUT "{{ .Release.Name }}-elasticsearch:9200/_ilm/policy/delete-after-14-days" \
              -H "Content-Type: application/json" \
              -d '{
                "policy": {
                  "phases": {
                    "hot": {
                      "actions": {
                        "rollover": {
                          "max_age": "14d"
                        }
                      }
                    },
                    "delete": {
                      "min_age": "14d",
                      "actions": {
                        "delete": {}
                      }
                    }
                  }
                }
              }';

              # Apply ILM policy to indices (e.g., log-*)
              curl -X PUT "{{ .Release.Name }}-elasticsearch:9200/log-*/_settings" \
              -H "Content-Type: application/json" \
              -d '{
                "settings": {
                  "index.lifecycle.name": "delete-after-14-days"
                }
              }';

          # Ensure the curl container has network access to Elasticsearch
          env:
            - name: ELASTICSEARCH_URL
              value: "http://{{ .Release.Name }}-elasticsearch:9200"
      restartPolicy: OnFailure
